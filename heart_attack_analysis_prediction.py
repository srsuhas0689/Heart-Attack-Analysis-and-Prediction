# -*- coding: utf-8 -*-
"""heart-attack-analysis-prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17c63NyTDdVmKpSs955ZkCoOVNwKbwQky

# Heart Attack Analysis & Prediction
"""

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import matplotlib.pyplot as plt
import seaborn as sns

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All"
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.metrics import accuracy_score, roc_curve

import warnings
warnings.filterwarnings("ignore")

"""<a id="2"></a>
## Data Content
* **Age:** Age of the patient
* **Sex:** Sex of the patient
* **exang:** exercise induced angina (1 = yes; 0 = no)
* **ca:** number of major vessels (0-3)
* **cp:** Chest Pain type chest pain type
    * Value 1: typical angina
    * Value 2: atypical angina
    * Value 3: non-anginal pain
    * Value 4: asymptomatic
* **trtbps:** resting blood pressure (in mm Hg)
* **chol:** cholestoral in mg/dl fetched via BMI sensor
* **fbs:** (fasting blood sugar > 120 mg/dl) (1 = true; 0 = false)
* **rest_ecg:** resting electrocardiographic results
    * Value 0: normal
    * Value 1: having ST-T wave abnormality (T wave inversions and/or ST elevation or depression of > 0.05 mV)
    * Value 2: showing probable or definite left ventricular hypertrophy by Estes' criteria
* **thalach:** maximum heart rate achieved
* **target:** 0= less chance of heart attack 1= more chance of heart attack

<a id="3"></a>
## Read and Analyse Data
* In this section, we read heart.csv
"""

# read data
df = pd.read_csv("/kaggle/input/heart-attack-analysis-prediction-dataset/heart.csv")

df.head()

# describe basic statistics of data
df.describe()

# information about data frame
df.info()

"""<a id="4"></a>
## Missing Value Analysis
"""

# missing value
df.isnull().sum()

"""<a id="5"></a>
## Unique Value Analysis
"""

for i in list(df.columns):
    print("{} -- {}".format(i, df[i].value_counts().shape[0]))

"""<a id="6"></a>
## Categorical Feature Analysis
"""

categorical_list = ["sex", "cp","fbs","restecg","exng","slp","caa","thall","output"]

df_categoric = df.loc[:, categorical_list]
for i in categorical_list:
    plt.figure()
    sns.countplot(x = i, data = df_categoric, hue = "output")
    plt.title(i)

"""<a id="7"></a>
## Numeric Feature Analysis
* Bivariate data analysis with scatter plot
"""

numeric_list = ["age", "trtbps","chol","thalachh","oldpeak","output"]

df_numeric = df.loc[:, numeric_list]
sns.pairplot(df_numeric, hue = "output", diag_kind = "kde")
plt.show()

"""<a id="8"></a>
## Standardization
"""

scaler = StandardScaler()
scaler

scaled_array = scaler.fit_transform(df[numeric_list[:-1]])

scaled_array

# pd.DataFrame(scaled_array).describe()

"""<a id="9"></a>
## Box Plot Analysis
"""

df_dummy = pd.DataFrame(scaled_array, columns = numeric_list[:-1])
df_dummy.head()

df_dummy = pd.concat([df_dummy, df.loc[:, "output"]], axis = 1)
df_dummy.head()

data_melted = pd.melt(df_dummy, id_vars = "output", var_name = "features", value_name = "value")
data_melted.head(20)

# box plot
plt.figure()
sns.boxplot(x = "features", y = "value", hue = "output", data= data_melted)
plt.show()

"""<a id="10"></a>
## Swarm Plot Analysis
"""

# swarm plot
plt.figure()
sns.swarmplot(x = "features", y = "value", hue = "output", data= data_melted)
plt.show()

"""<a id="11"></a>
## Cat Plot Analysis
"""

sns.catplot(x = "exng", y = "age", hue = "output", col = "sex", kind = "swarm", data = df)
plt.show()

"""<a id="12"></a>
## Correlation Analysis
"""

plt.figure(figsize = (14,10))
sns.heatmap(df.corr(), annot = True, fmt = ".1f", linewidths = .7)
plt.show()

"""<a id="13"></a>
## Outlier Detection
* Outliers can disrupt ML process.
* ![Box-Plot-Diagram-to-identify-Outliers-figure-1.png](attachment:a340c3a4-a084-445c-99b0-ec2589d81551.png)
"""

numeric_list = ["age", "trtbps","chol","thalachh","oldpeak"]
df_numeric = df.loc[:, numeric_list]
df_numeric.head()

df.describe()

# outlier detection
for i in numeric_list:

    # IQR
    Q1 = np.percentile(df.loc[:, i],25)
    Q3 = np.percentile(df.loc[:, i],75)

    IQR = Q3 - Q1

    print("Old shape: ", df.loc[:, i].shape)

    # upper bound
    upper = np.where(df.loc[:, i] >= (Q3 +2.5*IQR))

    # lower bound
    lower = np.where(df.loc[:, i] <= (Q1 - 2.5*IQR))

    print("{} -- {}".format(upper, lower))

    try:
        df.drop(upper[0], inplace = True)
    except: print("KeyError: {} not found in axis".format(upper[0]))

    try:
        df.drop(lower[0], inplace = True)
    except:  print("KeyError: {} not found in axis".format(lower[0]))

    print("New shape: ", df.shape)

"""<a id="14"></a>
## Modelling
"""

df1 = df.copy()

"""### Encoding Categorical Columns
![TW5m0aJ.png](attachment:08646436-dd1d-4179-bd0d-9257c5ea4b71.png)
"""

df1 = pd.get_dummies(df1, columns = categorical_list[:-1], drop_first = True)
df1.head()

#
X = df1.drop(["output"], axis = 1)
y = df1[["output"]]

"""### Scaling"""

scaler = StandardScaler()
scaler

X[numeric_list[:-1]] = scaler.fit_transform(X[numeric_list[:-1]])
X.head()

"""### Train/Test Split"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.1, random_state = 3)
print("X_train: {}".format(X_train.shape))
print("X_test: {}".format(X_test.shape))
print("y_train: {}".format(y_train.shape))
print("y_test: {}".format(y_test.shape))

"""### Logistic Regression"""

logreg = LogisticRegression()
logreg

# fitting = training
logreg.fit(X_train, y_train)

# calculate probabilities
y_pred_prob = logreg.predict_proba(X_test)
y_pred_prob

y_pred = np.argmax(y_pred_prob, axis = 1)
y_pred

#dummy_ = pd.DataFrame(y_pred_prob)
#dummy_["y_pred"] = y_pred
#dummy_.head()

print("Test accuracy: {}".format(accuracy_score(y_pred, y_test)))

"""##### ROC Curve
![ROC in one picture 2.png](attachment:2726f010-06bb-4bf8-9f1e-9674727f28ec.png)
"""

# ROC Curve
fpr, tpr, thresholds = roc_curve(y_test, y_pred_prob[:,1])

# plot curve
plt.plot([0,1],[0,1],"k--")
plt.plot(fpr, tpr, label = "Logistic Regression")
plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.title("Logistic Regression ROC Curve")
plt.show()

"""### Logistic Regression Hyperparameter Tuning"""

lr = LogisticRegression()
lr

penalty = ["l1", "l2"]

parameters = {"penalty":penalty}

lr_searcher = GridSearchCV(lr, parameters)

lr_searcher.fit(X_train, y_train)

print("Best parameters: ",lr_searcher.best_params_)

y_pred = lr_searcher.predict(X_test)

print("Test accuracy: {}".format(accuracy_score(y_pred, y_test)))

"""<a id="15"></a>
## Conclusion
* Lets make a practise now!
* You can make different analyzes to reinforce what you have learned.
"""